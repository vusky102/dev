from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import re
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By


def get_exchange_rate_hanpass():
    url = 'https://hanpass.com/vn'

    # Set up Chrome options
    chrome_options = Options()
    chrome_options.add_argument('--headless')  # Run Chrome in headless mode to avoid opening a browser window

    # Create a Chrome webdriver with options
    driver = webdriver.Chrome(options=chrome_options)
    driver.implicitly_wait(20)
    driver.get(url)

    # Allow some time for JavaScript to render the content
    driver.implicitly_wait(20)

    # Get the page source after JavaScript has rendered the content
    html_content = driver.page_source

    # Close the webdriver

    # Parse HTML content
    soup = BeautifulSoup(html_content, 'html.parser')
    driver.implicitly_wait(20)

    # Find the li element with the id "reverseExchangeRate"
    exchange_rate_li = soup.find('li', id='reverseExchangeRate')

    # Extract the exchange rate value
    exchange_rate_text = exchange_rate_li.get_text(strip=True)
    exchange_rate_value = exchange_rate_text.split(':')[1].strip()

    # Calculate the equivalent amount in VND for 1000 KRW
    exchange_rate_float = float(exchange_rate_value.split()[0].replace(',', ''))
    equivalent_amount_vnd = 1000 / exchange_rate_float

    driver.quit()
    return exchange_rate_value, equivalent_amount_vnd*1000

def get_exchange_rate_e9pay():
    url = 'https://e9pay.co.kr/'

    # Set up Chrome options
    chrome_options = Options()
    chrome_options.add_argument('--headless')  # Run Chrome in headless mode to avoid opening a browser window

    # Create a Chrome webdriver with options
    driver = webdriver.Chrome(options=chrome_options)

    driver.get(url)

    # Get the page source after JavaScript has rendered the content
    html_content = driver.page_source

    # Close the webdriver
    driver.quit()

    # Parse HTML content
    soup = BeautifulSoup(html_content, 'html.parser')

    # Find the span with id "display-exrate"
    exchange_rate_span = soup.find('span', id='display-exrate')
    
    # Extract the text content of the span
    exchange_rate_text = exchange_rate_span.get_text(strip=True)
    exchange_rate_value_str = exchange_rate_text.split("=")[1].strip()
    numeric_str = ''.join(c for c in exchange_rate_value_str if c.isdigit() or c == '.')

    # Convert to float
    exchange_rate_float = float(numeric_str)

    return exchange_rate_float*1000

def ex_rate_gmoney():


    # Set up Chrome options
    chrome_options = Options()
    chrome_options.add_argument('--headless')

# Create a Chrome webdriver with options
    driver = webdriver.Chrome(options=chrome_options)

# Open the webpage
    driver.get('https://mapi.gmoneytrans.net/exratenew1/Default.asp?country=viet%20nam')

# Use WebDriverWait to wait for the span element containing the exchange rate
    wait = WebDriverWait(driver, 2)
    span_element = wait.until(EC.presence_of_element_located((By.XPATH, "//span[@id='rate']")))

    # Extract the text content of the span element
    exchange_rate = span_element.text.split("=")[1].strip()
    #exchange_rate_value = exchange_rate_text.split(':')[1].strip()
    #exchange_rate_value = float(exchange_rate.split('=')[1].strip())
    exchange_rate_val=float(re.search(r'\d+\.\d+',exchange_rate).group())
    eqval=1000*exchange_rate_val

    driver.quit()
    return eqval*1000

def ex_rate_coinshot():
    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument('--headless')

    # Create a Chrome webdriver with options
    driver = webdriver.Chrome(options=chrome_options)

    # Open the webpage
    driver.get('https://coinshot.org/main')

    wait = WebDriverWait(driver, 10)

    button_element = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@value='vi']")))

    # Click on the button
    button_element.click()


    # Find the input element with the specified ID
    input_element = driver.find_element('xpath',"//input[@id='receiving-input']")

    # Extract the value of the input element
    exchange_rate_php = input_element.get_attribute('value')
    driver.quit()

    exchange_rate_float = float(exchange_rate_php.replace(',', ''))

    # Convert float to int
    exchange_rate_int = int(exchange_rate_float)

    exratevnd = exchange_rate_int*0.001
    return exratevnd*1000


def get_exchange_rate_gme():
    chrome_options = Options()
    chrome_options.add_argument('--headless')  # Run Chrome in headless mode to avoid opening a browser window

    # Create a Chrome webdriver with options
    driver = webdriver.Chrome(options=chrome_options)

    # Load the website
    url = 'https://online.gmeremit.com/'
    driver.get(url)

    wait = WebDriverWait(driver, 1)


    button_element = wait.until(EC.element_to_be_clickable((By.XPATH, "//div[@id='nCountry']")))

    # Click on the button
    button_element.click()

    country_input = driver.find_element(By.ID, 'CountryValue')

    # Click on the input field
    country_input.click()

    # Input "VN" into the field
    country_input.send_keys('VN')

    

    button_element_vn = wait.until(EC.element_to_be_clickable((By.XPATH, "//li[@data-countrycode='VND']")))

    # Click on the button
    button_element_vn.click()

    driver.implicitly_wait(10)
    

    # Find the input field with the specified CSS selector
    receiving_input = driver.find_element(By.CSS_SELECTOR, 'input#recAmt.form-control')

    # Get the value of the input field
    exchange_value = receiving_input.get_attribute('value')
    exchange_rate_val=float(exchange_value.split()[0].replace(',', ''))
    real_value= exchange_rate_val/995001*1000
    driver.quit()
    # Print the exchange value
    #print(f"GME Exchange Value: {real_value:,.0f}")
    return real_value*1000

def get_exchange_rate_jrf():
    from selenium import webdriver
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.common.by import By
    import pyautogui
    #import time

    # Set up Chrome options
    chrome_options = Options()
    #chrome_options.add_argument('--headless')  # Run Chrome in headless mode to avoid opening a browser window

    # Create a Chrome webdriver with options
    driver = webdriver.Chrome(options=chrome_options)
    pyautogui.hotkey('alt','tab')
    # Load the website
    url = 'https://www.jpremit.co.kr/'
    driver.get(url)
    #pyautogui.hotkey('alt','tab')
    #time.sleep(1)
    #wait = WebDriverWait(driver, 5)

    button_element=driver.find_element(By.CLASS_NAME, 'select_co')
    button_element.click()
    co_list_ul = driver.find_element(By.CLASS_NAME, 'co-list')
    driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight;", co_list_ul)
    button_element_vn =driver.find_element(By.ID, 'VND')
    button_element_vn.click()



    # Find the input field with the specified CSS selector
    receiving_input = driver.find_element(By.CSS_SELECTOR, 'input#rec_money')

    # Get the value of the input field
    exchange_value = receiving_input.get_attribute('value')
    exchange_rate_val=float(exchange_value.split()[0].replace(',', ''))/1000
    #real_value= exchange_rate_val/995001*1000


    # Print the exchange value
    #print(f"GME Exchange Value: {real_value:,.0f}")
    return exchange_rate_val*1000
    


def get_exchange_rate_sentbe():

    # Set up Chrome options
    chrome_options = Options()
    chrome_options.add_argument('--headless')  # Run Chrome in headless mode to avoid opening a browser window

    # Create a Chrome webdriver with options
    driver = webdriver.Chrome(options=chrome_options)

    # Load the website
    url = 'https://www.sentbe.com/vi?source_country=KR'
    driver.get(url)

    wait = WebDriverWait(driver, 10)

    # Find the input field with the specified XPath
    receiving_input = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='receiveAmount']")))

    # Get the value of the input field
    exchange_value = receiving_input.get_attribute('value')
    final_val= float(exchange_value.split()[0].replace(',',''))/1000
    # Print the exchange value
    #print(f"Sentbe Exchange rate: 1,000 KRW = {final_val:,.0f} VND")

    # Close the browser
    driver.quit()
    return final_val*1000


def get_exchange_rate_sbi():

    # Set up Chrome options
    chrome_options = Options()
    chrome_options.add_argument('--headless')  # Run Chrome in headless mode to avoid opening a browser window

    # Create a Chrome webdriver with options
    driver = webdriver.Chrome(options=chrome_options)

    # Load the website
    url = 'https://www.sbicosmoney.com/?lang=vi'
    driver.get(url)

    wait = WebDriverWait(driver, 1)

    # Find the input field with the specified XPath
    receiving_input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "input#targetAmount.input-dest-country.aos-init.aos-animate")))

    # Get the value of the input field
    exchange_value = receiving_input.get_attribute('value')
    final_val= float(exchange_value.split()[0].replace(',',''))/1000
    # Print the exchange value
    #print(f"SBI Exchange rate: 1,000 KRW = {final_val:,.0f} VND")
    #print(exchange_value)
    # Close the browser
    driver.quit()
    return final_val*1000


def get_exchange_rate_naver():
    # Set up Chrome options
    chrome_options = Options()
    chrome_options.add_argument('--headless')  # Run Chrome in headless mode to avoid opening a browser window

    # Create a Chrome webdriver with options
    driver = webdriver.Chrome(options=chrome_options)

    # Load the website
    url = 'https://search.naver.com/search.naver?where=nexearch&sm=top_hty&fbm=0&ie=utf8&query=krw+vnd'
    driver.get(url)

    #wait = WebDriverWait(driver, 5)


    # Find the input field with the specified CSS selector
    receiving_input = driver.find_element(By.XPATH, "//*[@data-value='up']")  #//*[@id="num"]

    # Get the value of the input field
    exchange_value = receiving_input.get_attribute('value')
    #exchange_rate_val=float(exchange_value.split()[0].replace(',', ''))
    #real_value= exchange_rate_val/995001*1000
    final_val = 100/float(exchange_value)*1000

    # Print the exchange value
    #print(f"GME Exchange Value: {real_value:,.0f}")
    #print(f"Naver Exchange rate: {final_val:,.0f}")
    driver.quit()
    return final_val*1000


# Call the functions to get exchange rates from both websites
exchange_rate_e9pay = get_exchange_rate_e9pay()
exchange_rate_hanpass, equivalent_amount_hanpass = get_exchange_rate_hanpass()
xrate_gmoney = ex_rate_gmoney()
xrate_coinshot = ex_rate_coinshot()
xrate_gme = get_exchange_rate_gme()
xrate_jrf = get_exchange_rate_jrf()
xrate_sentbe = get_exchange_rate_sentbe()
xrate_sbi = get_exchange_rate_sbi()
xrate_naver = get_exchange_rate_naver()


# Print the results at the end
#gmehe get_exchange_rate_gmend
print(f"E9Pay Exchange Rate: 1,000,000 KRW = {exchange_rate_e9pay:,.0f} VND")
print(f"Hanpass Exchange Rate: 1,000,000 KRW = {equivalent_amount_hanpass:,.0f} VND")
print(f"Gmoney Exchange Rate: 1,000,000 KRW = {xrate_gmoney:,.0f} VND")
print(f"Coinshot Exchange Rate: 1,000,000 KRW = {xrate_coinshot:,.0f} VND")
print(f"GME Exchange Rate: 1,000,000 KRW = {xrate_gme:,.0f} VND")
print(f"Sentbe Exchange rate: 1,000,000 KRW = {xrate_sentbe:,.0f} VND")
print(f"SBI Exchange Rate: 1,000,000 KRW = {xrate_sbi:,.0f} VND")
print(f"JRF Exchange Rate: 1,000,000 KRW = {xrate_jrf:,.0f} VND")
print(f"NAVER Exchange Rate: 1,000,000 KRW = {xrate_naver:,.0f} VND")



import matplotlib.pyplot as plt
import numpy as np

# Exchange rates data
exchange_rates = {
    'E9Pay': exchange_rate_e9pay,
    'Hanpass': equivalent_amount_hanpass,
    'Gmoney': xrate_gmoney,
    'Coinshot': xrate_coinshot,
    'GME': xrate_gme,
    'Sentbe': xrate_sentbe,
    'SBI': xrate_sbi,
    'JRF': xrate_jrf,
    'NAVER': xrate_naver,
}


# Sort the data by values in descending order
sorted_data = sorted(exchange_rates.items(), key=lambda x: x[1], reverse=False)
names, values = zip(*sorted_data)

# Round down the values to integers
values = [int(value) for value in values]

# Create a color for each bar
colors = plt.cm.viridis(np.linspace(0, 1, len(names)))

# Plotting the bar graph
plt.figure(figsize=(10, 6))
bars = plt.barh(names, values, color=colors, edgecolor='black')  # Use values directly without np.log()

plt.xlabel('Exchange Services')
#plt.ylabel('Equivalent Amount in VND for 1,000,000 KRW')
plt.title('Exchange Rates Comparison')

plt.xscale('log')

for bar, value in zip(bars, values):
    plt.text(bar.get_width(), bar.get_y() + bar.get_height() / 2, f'{value:,}', va='center')

plt.savefig('exchange_rates_chart.png')

# Display the plot
plt.show()
